<?xml version="1.0" ?><entry xmlns="http://www.w3.org/2005/Atom" xmlns:planet="http://planet.intertwingly.net/"><id>http://blog.suspended-chord.info/2013/02/01/leo-is-love/</id><link href="http://blog.suspended-chord.info/2013/02/01/leo-is-love/" rel="alternate" type="text/html"/><title>Leo is Love</title><summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Hello all.</p>

<p>Today I’m writing to evangelize my newest addiction, <a href="http://leoeditor.com/">Leo</a>.</p>

<p>Leo is a text editor, PIM tool, outliner, visual literate programming IDE, database, and way of life.  Since</p></div></summary><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Hello all.</p>

<p>Today I’m writing to evangelize my newest addiction, <a href="http://leoeditor.com/">Leo</a>.</p>

<p>Leo is a text editor, PIM tool, outliner, visual literate programming IDE, database, and way of life.  Since
discovering it a few days ago, I’ve started using it exclusively.  In fact, this very article was written with
it.</p>

<p>I thought I’d share a few tips on how to get it up and running on Windows systems, and then a few little
snippets of fun that I’ve picked up along the way.</p>

<h2>Installing Leo on Windows systems</h2>

<p>Getting Leo running on Windows systems isn’t as difficult as it seems.  You do need a few things, though:</p>

<ol>
<li><p>Python 2.7, 32-bit.  Available <a href="http://python.org/ftp/python/2.7.3/python-2.7.3.msi">here</a>.  64-bit
Python does not work for PyEnchant, meaning that you won’t have spellcheck if you go that route.  Also,
there isn’t a 64-bit setuptools package at the moment, so installing docutils will be difficult.  But Leo
doesn’t need much RAM, so this isn’t a problem.</p></li>
<li><p>PyQT for 32-bit Python 2.7.  Available <a href="http://sourceforge.net/projects/pyqt/files/PyQt4/PyQt-4.9.6/PyQt-Py2.7-x86-gpl-4.9.6-1.exe">here</a>.</p></li>
<li><p>PyEnchant for Python 2.7.  Available <a href="http://pypi.python.org/packages/any/p/pyenchant/pyenchant-1.6.5.win32.exe">here</a>.</p></li>
<li><p>setuptools for Python 2.7.  Available <a href="http://pypi.python.org/packages/2.7/s/setuptools/setuptools-0.6c11.win32-py2.7.exe#md5=57e1e64f6b7c7f1d2eddfc9746bbaf20">here</a>.</p></li>
<li><p>The latest Leo snapshot.  Available <a href="http://www.greygreen.org/leo/leo-editor-latest.zip">here</a>.</p></li>
<li><p>Optional: create-leo.bat, available <a href="https://gist.github.com/4692706">here</a>.</p></li>
</ol>


<h3>Install Python, PyQT, PyEnchant, and setuptools, in that order.</h3>

<p>Pretty straight forward.  Just accept the defaults and continue.</p>

<h3>Install pip and docutils</h3>

<p>Open up a command prompt, and enter the following commands:</p>

<pre><code>cd C:\Python27\Scripts
easy_install.exe pip
pip install docutils
</code></pre>

<h3>Unzip the leo snapshot</h3>

<p>Pick somewhere you’ll remember it.</p>

<p>That’s it.  You can now run Leo by doubleclicking <code>launchLeo.py</code>.  However, we can integrate it into
the OS a bit more, making it much nicer to use.</p>

<h3>Optional: run create-leo.bat</h3>

<p>Copy <code>create-leo.bat</code> to your Leo directory (the one with <code>launchLeo.py</code>).  Now open a command prompt,
and do the following:</p>

<pre><code>cd C:\path\to\leo
create-leo.bat &quot;C:\Python27\python.exe&quot; register
</code></pre>

<p>That will do 2 things: create some .bat files, and register the .leo file extension to open with Leo.
You are free to move <code>leo.bat</code> and <code>leoc.bat</code> anywhere on your system… double-click them and Leo
will run (<code>leoc.bat</code> keeps the console open).  Sinde .leo was registered to open with Leo, you can
double-click on any .leo file to open it in Leo, too.</p>

<p>Congratulations, you have Leo on your system.</p>

<h2>Some Leo Tricks</h2>

<h3>Set up your myLeoSettings.leo file</h3>

<p>Seriously, there’s crazy power in this file.  It allows you to change the way most of Leo works.</p>

<p>Me? Mine’s pretty simple at the moment.</p>

<pre><code>@settings
- Plugins
--- @enabled-plugins &lt;- I've disabled the nav_qt.py
                        plugin, as I find it annoying
- Keyboard Shortcuts
--- @shortcuts MyKeybindings &lt;- I've assigned `tab-cycle-previous` 
                                and `tab-cycle-next` to 
                                `ctrl+shift+tab` and `ctrl+tab`, 
                                respectively, as it mimics how 
                                Firefox and Chrome handle 
                                tab-switching
</code></pre>

<h3>Make some @buttons with external script references</h3>

<p>I wanted to make some @button nodes which would call a function with different parameters.  Due
to the way Leo scopes things, it wouldn’t work to write the function in a separate script and
reference it with a <code>&lt;&lt; script reference &gt;&gt;</code> notation, as in a @file node — it won’t be expanded.</p>

<p>The solution, provided to me on the leo-editor Google group by the author of Leo himself, is brilliant.</p>

<blockquote><p>Use exec to “inject” shared code into the namespace of the script being executed.   This is a cute trick, but it doesn’t seem to be in the faq.  There are example of this trick in unitTest.leo:  search for “@common”.</p>

<p>Do the following:</p>

<p>A. Put the common code somewhere, say in a node called “@common code”.  Note that the node can be called anything: I use @common to draw they eye, but it’s just my convention.</p>

<p>B. Start each script using the common code with::</p>

<pre><code>exec(g.findTestScript(c,'@common code'))
</code></pre>

<p><code>g.findTestScript</code> returns the <em>expanded</em> code of the entire subtree whose head is the node “common code”.  Thus, you can use @others and section references in the “common code” subtree! It’s cute.</p></blockquote>

<p>This translates into something like this:</p>

<pre><code>Node `@common code`:
  def foo(bar):
    g.es(&quot;Hiya, %s!&quot; % bar)

Node `@button george`:
  exec(g.findTestScript(c,'@common code'))
  foo('george')

Node `@button clem`:
  exec(g.findTestScript(c,'@common code'))
  foo('clem')
</code></pre>

<p>2 buttons calling 1 script, without code repetition!  This is nice, and it shows the power that Leo has, by
giving you the ability to access your entire document programmatically.  Simply beautiful, in my book.</p>

<p>I’ve used what I’ve learned so far to begin creating a Leo workbook helpful for running tabletop RPGs.  It’s
on Github if you’re curious: <a href="https://github.com/gatesphere/rpg.leo">gatesphere/rpg.leo</a>.</p>

<p>Thanks for reading!</p></div></content><updated planet:format="February 01, 2013 12:00 AM">2013-02-01T00:00:00Z</updated><published planet:format="February 01, 2013 12:00 AM">2013-02-01T00:00:00Z</published><author><name>Jake Peck</name></author><source><id>http://blog.suspended-chord.info</id><author><name>Jake Peck</name></author><link href="http://blog.suspended-chord.info/leo.xml" rel="self" type="application/atom+xml"/><title>a-&gt;ab</title><updated planet:format="December 02, 2013 12:00 AM">2013-12-02T00:00:00Z</updated><planet:faceheight>85</planet:faceheight><planet:activity_threshold>0</planet:activity_threshold><planet:format>atom10</planet:format><planet:facewidth>65</planet:facewidth><planet:http_etag>&quot;f3d7e23407b2fe37425b0a16847abf6211933e00&quot;</planet:http_etag><planet:bozo>false</planet:bozo><planet:name>a→ab (Jacob Peck)</planet:name><planet:css-id>a-ab-jacob-peck</planet:css-id><planet:http_status>200</planet:http_status></source></entry>